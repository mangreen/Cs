/*
*	CopyRight : ESTI_資策會新興智慧所
*	Description : III_Pedestrian-Route Route 對外介面API 
*	Version & Date : v0.3  2010/5/24
*/

#ifndef __ROUTE_MANAGER_H__
#define __ROUTE_MANAGER_H__

#include "prototype.h"
#include "platform.h"

#define PAGESIZE  1024
#define COUNT_SIZE  sizeof(III_SHORT)                              /* size of count */
#define LEVEL_SIZE  sizeof(III_SHORT)
#define ENT_SIZE  (sizeof(SR_Entry))                              // size of an entry
#define NUM_ENT ((PAGESIZE - COUNT_SIZE - LEVEL_SIZE) / ENT_SIZE) // # of entries in a page

#define ERROR_SUCCESS 0L

#define ERROR_PD_ROUTE_OPENROUTEFILE 1L

#define ERROR_PD_ROUTE_ROUTEFILEDATA_STARTPOINT 2L

#define ERROR_PD_ROUTE_ROUTEFILEDATA_ENDPOINT 3L

#define ERROR_SET_PD_ROUTE_WEIGHT 4L

#define ERROR_PD_ROUTE_ROUTEFILEDATA 5L

#define ERROR_PD_ROUTE_CLEAN 6L

#define ERROR_PD_ROUTE_CLOSELISTFULL 7L

#define ERROR_PD_ROUTE_EDGEIDBYZERO 8L

#define ERROR_PD_ROUTE_OPENLISTFULL 9L

#define ERROR_PD_ROUTE_SETVISIT 10L

#define ERROR_PD_ROUTE_SAVEEDGEINFO 11L

#define ERROR_PD_ROUTE_FREECLOSELIST 12L

#define ERROR_PD_ROUTE_CLEARASTARSTRUCT 13L

#define ERROR_PD_ROUTE_FINISHASTARSTRUCT 14L

#define ERROR_PD_ROUTE_CACHEINIT 15L

#define ERROR_PD_ROUTE_CACHECLEAN 16L

#define ERROR_PD_ROUTE_REARRANGEOPENLIST 17L

#define ERROR_PD_ROUTE_OVERFLOW 18L

#define ERROR_PD_ROUTE_CACHEOVERFLOW 19L

#define ERROR_PD_ROUTE_GETPATH 20L

#define ERROR_PD_ROUTE_ROUTETABLE_FORMAT 21L

#define ERROR_PD_ROUTE_CLOSELISTEMPTY 22L
/*
*    Constant/Macro/Type Definitions
*/

// Routing Type
enum TYPE_ROUTE
{
	TYPE_ROUTE_PD = 1,
	TYPE_ROUTE_INDOOR = 2,
	TYPE_ROUTE_MT = 3,
};

// Routing Mode
enum MODE_ROUTE_PD
{
	MODE_PD_SHORTEST = 1,
	MODE_PD_ACCESSABLE = 2,
	MODE_PD_RAIN_AVOID = 3,
};

enum MODE_ROUTE_INDOOR
{
	MODE_INDOOR_SHORTEST = 1,
	MODE_INDOOR_ACCESSABLE = 2,
};

enum MODE_ROUTE_MT
{
	MODE_MT_TRANSIT_LEAST = 1,
	MODE_MT_TIME_LEAST = 2,
};

typedef struct III_RTTABLE     //Routing Table Information
{
    III_INT numRoutingTable;          // Number of Routing Table
    III_CHAR *nameRoutingTable;           // Name of Routing Table divided by comma
} III_RTTABLE;

typedef struct III_TIME     //Time Information
{
    III_INT year;          // Year Information
    III_INT month;           // Month Information
    III_INT day;          // Day Information
    III_INT hour;           // Hour Information
    III_INT minute;          // Minute Information
    III_INT second;           // Second Information
} III_TIME;

typedef struct III_RTPARAM     //Parameter input for routing
{
    III_RTTABLE tableRT;          // Indicate the routing table information
    III_INT typeRouting;           // Indicate the routing type, 1 for pedestrian, 2 for indoor, 3 for embedded mass transit
    III_INT modeRouting;          // Indicate the routing mode and the definition would be according to the routing type
    III_INT weightSidewalk;           // Priority of Sidewalk
    III_INT weightShelter;          // Priority of Shelter
    III_INT weightAccessiblility;           // Priority of Accessibility
    III_INT weightStair;           // Priority of Stair
	III_INT numFloorWalkMax;          // The maximum number of floors which user would climb
	III_TIME timeDeparture;           // Suppose departure time
    III_TIME timeArrival;          // Suppose arrival time
    III_INT typeMT;           // Record transit carrier such as bus, MRT, Railway and so on.
	III_INT speedWalk;           // Indicate the user walk speed
    III_INT rangeWalk;          // Indicate the range to walk for mass transit to judge the stop distance for end user to walk.
    III_INT numMTPlanMax;           // Indicate the maximum number plans generated by mass transit routing for specific mass transit mode.
} III_RTPARAM;

typedef struct III_POINT     //Point information
{
    III_INT longitude;          // The longitude of the point
    III_INT latitude;           // The latitude of the point
    III_INT height;          // The height of the point
} III_POINT;

typedef struct III_RTPOINT     //Point information for routing
{
    III_POINT pntOriginal;          // original point
    III_POINT pntFix;           // The point after map matching
    III_INT nLineSegIdxFix;          // The edge id after map matching
    III_POINT pntFPoint;          // The Front node of the fix edge
    III_POINT pntTPoint;           // The Tail node of the fix edge
} III_RTPOINT;

typedef struct III_PDRTEDGE     //Routing edge result information for pedestrian and indoor routing
{
    III_INT idEdge;          // The edge ID
    III_INT distanceEdge;           // The edge length
} III_PDRTEDGE;

typedef struct III_RESULTPDRT     //Routing result information for pedestrian and indoor routing
{
    III_RTPOINT pntDeparture;          // The departure point information
    III_RTPOINT pntArrival;           // The arrival point information
    III_INT numEdge;          // The total edge number of routing plan
    III_PDRTEDGE *resultEdge;           // The edge information by link list
} III_RESULTPDRT;

//For Road Lock ///////////////////////////////////////////////////////
//--地圖資料庫  路段類別--
struct MdbStreet
{
	III_UINT m_sid;          //路段流水號ID
	III_UCHAR m_countryID;   //國家類別
	III_CHAR m_frc;          //道路等級
	III_USHORT m_oneWay;     //行車方向 (0-3)
	III_USHORT m_kph;        //速限
	III_CHAR m_fow;          //是否為高速公路
	III_CHAR m_pName[70];    //道路名稱
	III_CHAR m_rNumName[10]; //道路番號名稱
	III_INT m_rid;           //道路流水號ID
	III_USHORT m_ptNum;
	III_INT *m_ptsX;
	III_INT *m_ptsY;
	III_INT *m_X1;
	III_INT *m_Y1;
	III_INT *m_X2;
	III_INT *m_Y2;
	struct MdbStreet *next;
};


//記錄開啟檔案指標結構
struct SFileSet
{
	III_FILE *rtxfd;
	III_FILE *idxfd;
	III_FILE *pdtfd;
};

struct ListStreet
{
	struct MdbStreet *stHead, *stTail;
	III_INT count;
};

typedef struct
{
	int x_min;
	int y_min;
	int x_max;
	int y_max;
} SRect;

typedef struct
{
	SRect Rect;    // rectangle
	III_INT Child; // page number of child node in the Rtree index file
} SR_Entry;

typedef struct
{
	III_SHORT Level;
	III_SHORT EntCount;
	SR_Entry Entry[NUM_ENT];
} SR_Record;


struct SObjData
{
	III_UINT objID;
	III_UINT objPOS;
	III_UINT size; // 2006/05/08
	struct SObjData *next;
};

//For Road Lock /////////////////////////////////////////////////////

//mangreen modify
typedef struct III_RESULTNODE     //Routing node result information for indoor routing
{
	III_INT nodeID;
    III_POINT cdnt;					//Coordinate         
    III_INT attr;                   // The edge attribute
} III_RESULTNODE;

//mangreen modify
typedef struct III_RESULTINDOOR     //Routing result information for indoor routing (node coordinate and attribute)
{
    III_RTPOINT pntDeparture;			// The departure point information
    III_RTPOINT pntArrival;				// The arrival point information
    III_INT numNode;					// The total node number of routing plan
    III_RESULTNODE *resultNode;           // The edge information by link list
} III_RESULTINDOOR;

typedef struct _III_MTPLANSUBSTEP     //step element of mass transit routing result
{
    III_INT isPresent;          // indicate the data is just for presentation(corner) or not
    III_POINT pntTargetMTNode;           // The target point
    III_CHAR nameTargetMTNode;          // The name information of target point
    III_INT numDistance;           // The distance information of the step
    III_CHAR operation[50];          // The description of the step
    struct _III_MTPLANSUBSTEP *substepMTPlan;           // The sub step link list
} III_MTPLANSUBSTEP;

typedef struct _III_MTPLANSTEP     //step information of mass transit routing result
{
    III_INT typeMT;          // Record transit carrier such as bus, MRT, Railway and so on.
    III_CHAR nameMTStep;           // The description of the transit
    III_CHAR nameMTStepCompany;           // The description of the transit company
    III_INT numDistanceCost;           // The distance of the transit
    III_INT numTimeCost;           // The time of the transit
    III_POINT pntDeparture;           // The departure point of the transit
    III_CHAR nameDeparture;           // The departure name of the transit
    III_POINT pntArrival;           // The arrival point of the transit
    III_CHAR nameArrival;           // The arrival name of the transit
    III_CHAR remark;           // The remark of the transit
    III_MTPLANSUBSTEP *substepMTPlan;           // The sub step list
    struct _III_MTPLANSTEP *detailMTPlan;           // The step link list
} III_MTPLANSTEP;

typedef struct _III_MTPLANDETAIL     //Routing result information for single mass transit routing plan
{
    III_INT minuteTotal;          // The total time cost by minutes
    III_INT distanceTotal;          // The total distance cost by meters
    III_MTPLANSTEP *stepMTPlan;          // The step list
    struct _III_MTPLANDETAIL *detailNextMTPlan;           // The plan link list
} III_MTPLANDETAIL;

typedef struct _III_RESULTMTRT     //Routing result information for mass transit routing 
{
    III_RTPOINT pntDeparture;          // The departure point information
    III_RTPOINT pntArrival;          // The arrival point information
    III_INT numPlan;          // The number of the plans
    struct _III_RESULTMTRT *detailMTPlan;           // The routing result link list
} III_RESULTMTRT;

/*
*    Variable Declarations
*/

/*
*    Function Declarations
*/

/*
* Function:
* Parameters:
* Return value:
*/
#if 0
#if defined(__cplusplus)
extern "C" {
#endif

III_INT III_SetRoutingParam(III_RTPARAM*);
III_INT III_Routing(III_RTPOINT pntDeparture, III_RTPOINT pntArrival);
III_INT III_GetPdRTResult(III_RESULTPDRT*);
III_INT III_GetMTRTResult(III_RESULTMTRT*);

#if defined(__cplusplus)
}
#endif
#endif

#endif